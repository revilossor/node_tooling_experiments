{
	"variables": [],
	"info": {
		"name": "node_debug",
		"_postman_id": "e5d9f47d-dbd0-96ce-4258-d391226ed392",
		"description": "a spike on debugging node applications\n - stepping through using chrome debugger\n - using postman / neuman to test api endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "get add [0, 1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 1\"] = jsonData.result === 1;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/add?data=[0,1]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "adds all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "get add [0, 1, 2, 3]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 6\"] = jsonData.result === 6;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/add?data=[0,1,2,3]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "adds all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "post add [0, 1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 1\"] = jsonData.result === 1;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/add",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[0, 1]\n}"
				},
				"description": "adds all numbers in the 'data' arg in the posted JSON"
			},
			"response": []
		},
		{
			"name": "post add [0, 1, 2, 3]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 6\"] = jsonData.result === 6;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/add",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[0, 1, 2, 3]\n}"
				},
				"description": "adds all numbers in the 'data' arg in the posted JSON"
			},
			"response": []
		},
		{
			"name": "get sub [0, 1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is -1\"] = jsonData.result === -1;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/sub?data=[0,1]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "subs all numbers in the 'data' arg in sequence"
			},
			"response": []
		},
		{
			"name": "get sub [0, 1, 2, 3]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is -6\"] = jsonData.result === -6;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/sub?data=[0,1,2,3]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "subs all numbers in the 'data' arg in sequence"
			},
			"response": []
		},
		{
			"name": "post sub [0, 1]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is -1\"] = jsonData.result === -1;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/sub",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[0, 1]\n}"
				},
				"description": "subs all numbers in the 'data' arg in the posted JSON sequentially"
			},
			"response": []
		},
		{
			"name": "post sub [0, 1, 2, 3]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is -6\"] = jsonData.result === -6;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/sub",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[0, 1, 2, 3]\n}"
				},
				"description": "subs all numbers in the 'data' arg in the posted JSON sequentially"
			},
			"response": []
		},
		{
			"name": "get mul [2, 2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 4\"] = jsonData.result === 4;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/mul?data=[2,2]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "get mul [2, 2, 2, 2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 16\"] = jsonData.result === 16;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/mul?data=[2,2,2,2]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "post mul [2, 2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 4\"] = jsonData.result === 4;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/mul",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[2, 2]\n}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "post mul [2, 2, 2, 2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 16\"] = jsonData.result === 16;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/mul",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[2, 2, 2, 2]\n}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "get div [2,2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 1\"] = jsonData.result === 1;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/div?data=[2,2]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "get div [2,2,2,2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 0.25\"] = jsonData.result === 0.25;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/div?data=[2,2,2,2]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "post div [2, 2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 1\"] = jsonData.result === 1;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/div",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[2,2]\n}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "post div [2, 2, 2, 2]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 200\"] = responseCode.code === 200;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is true\"] = jsonData.success === true;",
							"tests[\"result is number\"] = typeof jsonData.result === \"number\";",
							"tests[\"result is 0.25\"] = jsonData.result === 0.25;",
							"tests[\"error is null\"] = jsonData.error === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/div",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[2, 2, 2, 2]\n}"
				},
				"description": "multiplies all numbers in the 'data' arg in the url"
			},
			"response": []
		},
		{
			"name": "get unknown",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 404\"] = responseCode.code === 404;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is false\"] = jsonData.success === false;",
							"tests[\"result is null\"] = jsonData.result === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/unknown?data=[0,1]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "a get request to an unknown endpoint"
			},
			"response": []
		},
		{
			"name": "post unknown",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 404\"] = responseCode.code === 404;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is false\"] = jsonData.success === false;",
							"tests[\"result is null\"] = jsonData.result === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/unknown",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[0, 1]\n}"
				},
				"description": "a post request to an unknown endpoint"
			},
			"response": []
		},
		{
			"name": "get invalid arguments",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 400\"] = responseCode.code === 400;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is false\"] = jsonData.success === false;",
							"tests[\"result is null\"] = jsonData.result === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/add?data=[\"q\",1]",
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"some\":\"data\"}"
				},
				"description": "a get request with invalid arguments"
			},
			"response": []
		},
		{
			"name": "post invalid arguments",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"status code is 400\"] = responseCode.code === 400;",
							"tests[\"has 'success' field\"] = responseBody.has(\"success\");",
							"tests[\"has 'result' field\"] = responseBody.has(\"result\");",
							"tests[\"has 'error' field\"] = responseBody.has(\"error\");",
							"tests[\"success is false\"] = jsonData.success === false;",
							"tests[\"result is null\"] = jsonData.result === null;"
						]
					}
				}
			],
			"request": {
				"url": "http://localhost:8080/calc/add",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"data\":[\"q\", 1]\n}"
				},
				"description": "posts to valid endpoint witn invalid json data"
			},
			"response": []
		}
	]
}